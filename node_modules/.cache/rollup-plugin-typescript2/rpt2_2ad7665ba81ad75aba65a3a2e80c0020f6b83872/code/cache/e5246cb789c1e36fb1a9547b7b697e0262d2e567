{"code":"import { CurrencyAmount, Token } from './entities';\r\nimport { LAMBDA_URL, STOP_LIMIT_ORDER_ADDRESS } from './constants';\r\nimport { getSignature, getSignatureWithProvider, getTypeHash, getTypedData } from './entities';\r\nimport { BigNumber } from '@ethersproject/bignumber';\r\nimport { Contract } from '@ethersproject/contracts';\r\nimport abi from './abis/StopLimitOrder.json';\r\nimport { defaultAbiCoder } from '@ethersproject/abi';\r\nimport fetch from 'isomorphic-unfetch';\r\nimport { keccak256 } from '@ethersproject/solidity';\r\nimport { validateAndParseAddress } from './functions/validateAndParseAddress';\r\nexport class LimitOrder {\r\n    constructor(maker, amountIn, amountOut, recipient, startTime, endTime, stopPrice = '0', oracleAddress = '0x0000000000000000000000000000000000000000', oracleData = '0x00000000000000000000000000000000000000000000000000000000000000', v = 0, r = '', s = '') {\r\n        this.maker = validateAndParseAddress(maker);\r\n        this.amountIn = amountIn;\r\n        this.amountOut = amountOut;\r\n        this.recipient = validateAndParseAddress(recipient);\r\n        this.startTime = startTime.toString();\r\n        this.endTime = endTime.toString();\r\n        this.stopPrice = stopPrice;\r\n        this.oracleAddress = validateAndParseAddress(oracleAddress);\r\n        this.oracleData = oracleData;\r\n        this.v = v;\r\n        this.r = r;\r\n        this.s = s;\r\n    }\r\n    static getLimitOrder(data) {\r\n        return new LimitOrder(data.maker, CurrencyAmount.fromRawAmount(new Token(data.chainId, data.tokenIn, data.tokenInDecimals, data.tokenInSymbol), data.amountIn), CurrencyAmount.fromRawAmount(new Token(data.chainId, data.tokenOut, data.tokenOutDecimals, data.tokenOutSymbol), data.amountOut), data.recipient, data.startTime, data.endTime, data.stopPrice, data.oracleAddress, data.oracleData, data.v, data.r, data.s);\r\n    }\r\n    get amountInRaw() {\r\n        return this.amountIn.quotient.toString();\r\n    }\r\n    get amountOutRaw() {\r\n        return this.amountOut.quotient.toString();\r\n    }\r\n    get tokenInAddress() {\r\n        return this.amountIn.currency.address;\r\n    }\r\n    get tokenOutAddress() {\r\n        return this.amountOut.currency.address;\r\n    }\r\n    get tokenInDecimals() {\r\n        return this.amountIn.currency.decimals;\r\n    }\r\n    get tokenOutDecimals() {\r\n        return this.amountOut.currency.decimals;\r\n    }\r\n    get tokenInSymbol() {\r\n        return this.amountIn.currency.symbol || '';\r\n    }\r\n    get tokenOutSymbol() {\r\n        return this.amountOut.currency.symbol || '';\r\n    }\r\n    get chainId() {\r\n        return this.amountIn.currency.chainId;\r\n    }\r\n    usePrice(price) {\r\n        return new LimitOrder(this.maker, this.amountIn, CurrencyAmount.fromRawAmount(this.amountOut.currency, price.quote(this.amountIn).quotient.toString()), this.recipient, this.startTime, this.endTime, this.stopPrice, this.oracleAddress, this.oracleData);\r\n    }\r\n    signdOrderWithPrivatekey(chainId, privateKey) {\r\n        let order = {\r\n            maker: this.maker,\r\n            tokenIn: this.tokenInAddress,\r\n            tokenOut: this.tokenOutAddress,\r\n            amountIn: this.amountInRaw,\r\n            amountOut: this.amountOutRaw,\r\n            recipient: this.recipient,\r\n            startTime: this.startTime,\r\n            endTime: this.endTime,\r\n            stopPrice: this.stopPrice,\r\n            oracleAddress: this.oracleAddress,\r\n            oracleData: keccak256(['bytes'], [this.oracleData])\r\n        };\r\n        const { v, r, s } = getSignature(order, chainId, privateKey);\r\n        this.v = v;\r\n        this.r = r;\r\n        this.s = s;\r\n        return { v, r, s };\r\n    }\r\n    async signOrderWithProvider(chainId, provider) {\r\n        let order = {\r\n            maker: this.maker,\r\n            tokenIn: this.tokenInAddress,\r\n            tokenOut: this.tokenOutAddress,\r\n            amountIn: this.amountInRaw,\r\n            amountOut: this.amountOutRaw,\r\n            recipient: this.recipient,\r\n            startTime: this.startTime,\r\n            endTime: this.endTime,\r\n            stopPrice: this.stopPrice,\r\n            oracleAddress: this.oracleAddress,\r\n            oracleData: keccak256(['bytes'], [this.oracleData])\r\n        };\r\n        const { v, r, s } = await getSignatureWithProvider(order, chainId, provider);\r\n        this.v = v;\r\n        this.r = r;\r\n        this.s = s;\r\n        return { v, r, s };\r\n    }\r\n    getTypedData() {\r\n        let order = {\r\n            maker: this.maker,\r\n            tokenIn: this.tokenInAddress,\r\n            tokenOut: this.tokenOutAddress,\r\n            amountIn: this.amountInRaw,\r\n            amountOut: this.amountOutRaw,\r\n            recipient: this.recipient,\r\n            startTime: this.startTime,\r\n            endTime: this.endTime,\r\n            stopPrice: this.stopPrice,\r\n            oracleAddress: this.oracleAddress,\r\n            oracleData: keccak256(['bytes'], [this.oracleData])\r\n        };\r\n        return getTypedData(order, this.chainId);\r\n    }\r\n    getTypeHash() {\r\n        let typedData = this.getTypedData();\r\n        let digest = getTypeHash(typedData);\r\n        return digest;\r\n    }\r\n    async send() {\r\n        const resp = await fetch(`${LAMBDA_URL}/orders/create`, {\r\n            method: 'POST',\r\n            body: JSON.stringify({\r\n                maker: this.maker,\r\n                tokenIn: this.tokenInAddress,\r\n                tokenOut: this.tokenOutAddress,\r\n                tokenInDecimals: this.tokenInDecimals,\r\n                tokenOutDecimals: this.tokenOutDecimals,\r\n                tokenInSymbol: this.tokenInSymbol,\r\n                tokenOutSymbol: this.tokenOutSymbol,\r\n                amountIn: this.amountInRaw,\r\n                amountOut: this.amountOutRaw,\r\n                recipient: this.recipient,\r\n                startTime: this.startTime,\r\n                endTime: this.endTime,\r\n                stopPrice: this.stopPrice,\r\n                oracleAddress: this.oracleAddress,\r\n                oracleData: this.oracleData,\r\n                v: this.v,\r\n                r: this.r,\r\n                s: this.s,\r\n                chainId: this.amountIn.currency.chainId\r\n            })\r\n        });\r\n        return resp.json();\r\n    }\r\n}\r\nexport class FillLimitOrder {\r\n    constructor(order, path, amountExternal, amountToFill, limitOrderReceiver, to, keepTokenIn = false) {\r\n        this.order = order;\r\n        this.path = path.map(validateAndParseAddress);\r\n        this.amountExternal = amountExternal;\r\n        this.amountToFill = amountToFill;\r\n        this.limitOrderReceiver = validateAndParseAddress(limitOrderReceiver);\r\n        this.to = validateAndParseAddress(to);\r\n        this.tokenIn = order.amountIn.currency.address;\r\n        this.tokenOut = order.amountOut.currency.address;\r\n        this.limitOrderReceiverData = defaultAbiCoder.encode(['address[]', 'uint256', 'address', 'bool'], [this.path, this.amountExternal.toString(), this.to, keepTokenIn]);\r\n    }\r\n    fillOrderOpen(signer, extra) {\r\n        extra.open = true;\r\n        return this.fillOrder(signer, extra);\r\n    }\r\n    async fillOrder(signer, extra) {\r\n        const { gasPrice, nonce, forceExecution = false, open = false } = extra;\r\n        const func = open ? 'fillOrderOpen' : 'fillOrder';\r\n        const orderArg = [\r\n            this.order.maker,\r\n            this.order.amountInRaw,\r\n            this.order.amountOutRaw,\r\n            this.order.recipient,\r\n            this.order.startTime,\r\n            this.order.endTime,\r\n            this.order.stopPrice,\r\n            this.order.oracleAddress,\r\n            this.order.oracleData,\r\n            this.amountToFill.toString(),\r\n            this.order.v,\r\n            this.order.r,\r\n            this.order.s\r\n        ];\r\n        const limitOrderContract = new Contract(STOP_LIMIT_ORDER_ADDRESS[this.order.chainId], abi, signer);\r\n        let gasLimit;\r\n        let executed = true;\r\n        if (extra.debug)\r\n            console.log(orderArg, this.path, this.limitOrderReceiver, this.limitOrderReceiverData);\r\n        try {\r\n            gasLimit = await limitOrderContract.estimateGas[func](orderArg, this.path[0], this.path[this.path.length - 1], this.limitOrderReceiver, this.limitOrderReceiverData);\r\n            gasLimit = gasLimit.mul(11).div(10);\r\n        }\r\n        catch (e) {\r\n            if (forceExecution) {\r\n                console.log('Failed to estimate gas, forcing execution');\r\n                gasLimit = BigNumber.from('400000'); // 400k\r\n                executed = true;\r\n            }\r\n            else {\r\n                return { executed: false };\r\n            }\r\n        }\r\n        const transaction = await limitOrderContract.fillOrder(orderArg, this.path[0], this.path[this.path.length - 1], this.limitOrderReceiver, this.limitOrderReceiverData, { gasLimit, gasPrice, nonce });\r\n        return { executed, transaction };\r\n    }\r\n}\r\n//# sourceMappingURL=limitorder.js.map","references":["/Users/safahi/Documents/GitHub/core-sdk/src/entities/index.ts","/Users/safahi/Documents/GitHub/core-sdk/src/constants/index.ts","/Users/safahi/Documents/GitHub/core-sdk/src/entities/index.ts","/Users/safahi/Documents/GitHub/core-sdk/node_modules/@ethersproject/bignumber/lib/index.d.ts","/Users/safahi/Documents/GitHub/core-sdk/src/enums/index.ts","/Users/safahi/Documents/GitHub/core-sdk/node_modules/@ethersproject/contracts/lib/index.d.ts","/Users/safahi/Documents/GitHub/core-sdk/node_modules/@ethersproject/experimental/lib/index.d.ts","/Users/safahi/Documents/GitHub/core-sdk/node_modules/@ethersproject/abstract-signer/lib/index.d.ts","/Users/safahi/Documents/GitHub/core-sdk/node_modules/@ethersproject/transactions/lib/index.d.ts","/Users/safahi/Documents/GitHub/core-sdk/node_modules/@ethersproject/providers/lib/index.d.ts","/Users/safahi/Documents/GitHub/core-sdk/src/abis/StopLimitOrder.json","/Users/safahi/Documents/GitHub/core-sdk/node_modules/@ethersproject/abi/lib/index.d.ts","/Users/safahi/Documents/GitHub/core-sdk/node_modules/isomorphic-unfetch/index.d.ts","/Users/safahi/Documents/GitHub/core-sdk/node_modules/@ethersproject/solidity/lib/index.d.ts","/Users/safahi/Documents/GitHub/core-sdk/src/functions/validateAndParseAddress.ts"],"map":"{\"version\":3,\"file\":\"limitorder.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/limitorder.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAE,cAAc,EAAS,KAAK,EAAE,MAAM,YAAY,CAAA;AACzD,OAAO,EAAE,UAAU,EAAE,wBAAwB,EAAE,MAAM,aAAa,CAAA;AAClE,OAAO,EAAW,YAAY,EAAE,wBAAwB,EAAE,WAAW,EAAE,YAAY,EAAE,MAAM,YAAY,CAAA;AAEvG,OAAO,EAAE,SAAS,EAAE,MAAM,0BAA0B,CAAA;AAEpD,OAAO,EAAE,QAAQ,EAAE,MAAM,0BAA0B,CAAA;AAKnD,OAAO,GAAG,MAAM,4BAA4B,CAAA;AAC5C,OAAO,EAAE,eAAe,EAAE,MAAM,oBAAoB,CAAA;AACpD,OAAO,KAAK,MAAM,oBAAoB,CAAA;AACtC,OAAO,EAAE,SAAS,EAAE,MAAM,yBAAyB,CAAA;AACnD,OAAO,EAAE,uBAAuB,EAAE,MAAM,qCAAqC,CAAA;AAyB7E,MAAM,OAAO,UAAU;IAqCrB,YACE,KAAa,EACb,QAA+B,EAC/B,SAAgC,EAChC,SAAiB,EACjB,SAA0B,EAC1B,OAAwB,EACxB,SAAS,GAAG,GAAG,EACf,aAAa,GAAG,4CAA4C,EAC5D,UAAU,GAAG,kEAAkE,EAC/E,CAAC,GAAG,CAAC,EACL,CAAC,GAAG,EAAE,EACN,CAAC,GAAG,EAAE;QAEN,IAAI,CAAC,KAAK,GAAG,uBAAuB,CAAC,KAAK,CAAC,CAAA;QAC3C,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAA;QACxB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAA;QAC1B,IAAI,CAAC,SAAS,GAAG,uBAAuB,CAAC,SAAS,CAAC,CAAA;QACnD,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC,QAAQ,EAAE,CAAA;QACrC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,QAAQ,EAAE,CAAA;QACjC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAA;QAC1B,IAAI,CAAC,aAAa,GAAG,uBAAuB,CAAC,aAAa,CAAC,CAAA;QAC3D,IAAI,CAAC,UAAU,GAAG,UAAU,CAAA;QAC5B,IAAI,CAAC,CAAC,GAAG,CAAC,CAAA;QACV,IAAI,CAAC,CAAC,GAAG,CAAC,CAAA;QACV,IAAI,CAAC,CAAC,GAAG,CAAC,CAAA;IACZ,CAAC;IAjDD,MAAM,CAAC,aAAa,CAAC,IAAqB;QACxC,OAAO,IAAI,UAAU,CACnB,IAAI,CAAC,KAAK,EACV,cAAc,CAAC,aAAa,CAC1B,IAAI,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,EAC/E,IAAI,CAAC,QAAQ,CACd,EACD,cAAc,CAAC,aAAa,CAC1B,IAAI,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,cAAc,CAAC,EAClF,IAAI,CAAC,SAAS,CACf,EACD,IAAI,CAAC,SAAS,EACd,IAAI,CAAC,SAAS,EACd,IAAI,CAAC,OAAO,EACZ,IAAI,CAAC,SAAS,EACd,IAAI,CAAC,aAAa,EAClB,IAAI,CAAC,UAAU,EACf,IAAI,CAAC,CAAC,EACN,IAAI,CAAC,CAAC,EACN,IAAI,CAAC,CAAC,CACP,CAAA;IACH,CAAC;IA8BD,IAAI,WAAW;QACb,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAA;IAC1C,CAAC;IAED,IAAI,YAAY;QACd,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAA;IAC3C,CAAC;IAED,IAAI,cAAc;QAChB,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAA;IACvC,CAAC;IAED,IAAI,eAAe;QACjB,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAA;IACxC,CAAC;IAED,IAAI,eAAe;QACjB,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAA;IACxC,CAAC;IAED,IAAI,gBAAgB;QAClB,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAA;IACzC,CAAC;IAED,IAAI,aAAa;QACf,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,IAAI,EAAE,CAAA;IAC5C,CAAC;IAED,IAAI,cAAc;QAChB,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,IAAI,EAAE,CAAA;IAC7C,CAAC;IAED,IAAI,OAAO;QACT,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAA;IACvC,CAAC;IAED,QAAQ,CAAC,KAA0B;QACjC,OAAO,IAAI,UAAU,CACnB,IAAI,CAAC,KAAK,EACV,IAAI,CAAC,QAAQ,EACb,cAAc,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,EACrG,IAAI,CAAC,SAAS,EACd,IAAI,CAAC,SAAS,EACd,IAAI,CAAC,OAAO,EACZ,IAAI,CAAC,SAAS,EACd,IAAI,CAAC,aAAa,EAClB,IAAI,CAAC,UAAU,CAChB,CAAA;IACH,CAAC;IAED,wBAAwB,CAAC,OAAgB,EAAE,UAAkB;QAC3D,IAAI,KAAK,GAAY;YACnB,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,OAAO,EAAE,IAAI,CAAC,cAAc;YAC5B,QAAQ,EAAE,IAAI,CAAC,eAAe;YAC9B,QAAQ,EAAE,IAAI,CAAC,WAAW;YAC1B,SAAS,EAAE,IAAI,CAAC,YAAY;YAC5B,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,aAAa,EAAE,IAAI,CAAC,aAAa;YACjC,UAAU,EAAE,SAAS,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;SACpD,CAAA;QAED,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,YAAY,CAAC,KAAK,EAAE,OAAO,EAAE,UAAU,CAAC,CAAA;QAE5D,IAAI,CAAC,CAAC,GAAG,CAAC,CAAA;QACV,IAAI,CAAC,CAAC,GAAG,CAAC,CAAA;QACV,IAAI,CAAC,CAAC,GAAG,CAAC,CAAA;QAEV,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAA;IACpB,CAAC;IAED,KAAK,CAAC,qBAAqB,CAAC,OAAgB,EAAE,QAAsB;QAClE,IAAI,KAAK,GAAY;YACnB,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,OAAO,EAAE,IAAI,CAAC,cAAc;YAC5B,QAAQ,EAAE,IAAI,CAAC,eAAe;YAC9B,QAAQ,EAAE,IAAI,CAAC,WAAW;YAC1B,SAAS,EAAE,IAAI,CAAC,YAAY;YAC5B,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,aAAa,EAAE,IAAI,CAAC,aAAa;YACjC,UAAU,EAAE,SAAS,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;SACpD,CAAA;QAED,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,MAAM,wBAAwB,CAAC,KAAK,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAA;QAE5E,IAAI,CAAC,CAAC,GAAG,CAAC,CAAA;QACV,IAAI,CAAC,CAAC,GAAG,CAAC,CAAA;QACV,IAAI,CAAC,CAAC,GAAG,CAAC,CAAA;QAEV,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAA;IACpB,CAAC;IAED,YAAY;QACV,IAAI,KAAK,GAAY;YACnB,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,OAAO,EAAE,IAAI,CAAC,cAAc;YAC5B,QAAQ,EAAE,IAAI,CAAC,eAAe;YAC9B,QAAQ,EAAE,IAAI,CAAC,WAAW;YAC1B,SAAS,EAAE,IAAI,CAAC,YAAY;YAC5B,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,aAAa,EAAE,IAAI,CAAC,aAAa;YACjC,UAAU,EAAE,SAAS,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;SACpD,CAAA;QAED,OAAO,YAAY,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,CAAA;IAC1C,CAAC;IAED,WAAW;QACT,IAAI,SAAS,GAAG,IAAI,CAAC,YAAY,EAAE,CAAA;QACnC,IAAI,MAAM,GAAG,WAAW,CAAC,SAAS,CAAC,CAAA;QACnC,OAAO,MAAM,CAAA;IACf,CAAC;IAED,KAAK,CAAC,IAAI;QACR,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,GAAG,UAAU,gBAAgB,EAAE;YACtD,MAAM,EAAE,MAAM;YACd,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;gBACnB,KAAK,EAAE,IAAI,CAAC,KAAK;gBACjB,OAAO,EAAE,IAAI,CAAC,cAAc;gBAC5B,QAAQ,EAAE,IAAI,CAAC,eAAe;gBAC9B,eAAe,EAAE,IAAI,CAAC,eAAe;gBACrC,gBAAgB,EAAE,IAAI,CAAC,gBAAgB;gBACvC,aAAa,EAAE,IAAI,CAAC,aAAa;gBACjC,cAAc,EAAE,IAAI,CAAC,cAAc;gBACnC,QAAQ,EAAE,IAAI,CAAC,WAAW;gBAC1B,SAAS,EAAE,IAAI,CAAC,YAAY;gBAC5B,SAAS,EAAE,IAAI,CAAC,SAAS;gBACzB,SAAS,EAAE,IAAI,CAAC,SAAS;gBACzB,OAAO,EAAE,IAAI,CAAC,OAAO;gBACrB,SAAS,EAAE,IAAI,CAAC,SAAS;gBACzB,aAAa,EAAE,IAAI,CAAC,aAAa;gBACjC,UAAU,EAAE,IAAI,CAAC,UAAU;gBAC3B,CAAC,EAAE,IAAI,CAAC,CAAC;gBACT,CAAC,EAAE,IAAI,CAAC,CAAC;gBACT,CAAC,EAAE,IAAI,CAAC,CAAC;gBACT,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,OAAO;aACxC,CAAC;SACH,CAAC,CAAA;QAEF,OAAO,IAAI,CAAC,IAAI,EAAE,CAAA;IACpB,CAAC;CACF;AAED,MAAM,OAAO,cAAc;IAWzB,YACE,KAAiB,EACjB,IAAc,EACd,cAAyB,EACzB,YAAuB,EACvB,kBAA0B,EAC1B,EAAU,EACV,WAAW,GAAG,KAAK;QAEnB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAA;QAClB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAA;QAC7C,IAAI,CAAC,cAAc,GAAG,cAAc,CAAA;QACpC,IAAI,CAAC,YAAY,GAAG,YAAY,CAAA;QAChC,IAAI,CAAC,kBAAkB,GAAG,uBAAuB,CAAC,kBAAkB,CAAC,CAAA;QACrE,IAAI,CAAC,EAAE,GAAG,uBAAuB,CAAC,EAAE,CAAC,CAAA;QACrC,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAA;QAC9C,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAA;QAEhD,IAAI,CAAC,sBAAsB,GAAG,eAAe,CAAC,MAAM,CAClD,CAAC,WAAW,EAAE,SAAS,EAAE,SAAS,EAAE,MAAM,CAAC,EAC3C,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,WAAW,CAAC,CAClE,CAAA;IACH,CAAC;IAEM,aAAa,CAClB,MAAc,EACd,KAMC;QAED,KAAK,CAAC,IAAI,GAAG,IAAI,CAAA;QACjB,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,KAAK,CAAC,CAAA;IACtC,CAAC;IAEM,KAAK,CAAC,SAAS,CACpB,MAA6B,EAC7B,KAMC;QAED,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,cAAc,GAAG,KAAK,EAAE,IAAI,GAAG,KAAK,EAAE,GAAG,KAAK,CAAA;QAEvE,MAAM,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,WAAW,CAAA;QAEjD,MAAM,QAAQ,GAAG;YACf,IAAI,CAAC,KAAK,CAAC,KAAK;YAChB,IAAI,CAAC,KAAK,CAAC,WAAW;YACtB,IAAI,CAAC,KAAK,CAAC,YAAY;YACvB,IAAI,CAAC,KAAK,CAAC,SAAS;YACpB,IAAI,CAAC,KAAK,CAAC,SAAS;YACpB,IAAI,CAAC,KAAK,CAAC,OAAO;YAClB,IAAI,CAAC,KAAK,CAAC,SAAS;YACpB,IAAI,CAAC,KAAK,CAAC,aAAa;YACxB,IAAI,CAAC,KAAK,CAAC,UAAU;YACrB,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE;YAC5B,IAAI,CAAC,KAAK,CAAC,CAAC;YACZ,IAAI,CAAC,KAAK,CAAC,CAAC;YACZ,IAAI,CAAC,KAAK,CAAC,CAAC;SACb,CAAA;QAED,MAAM,kBAAkB,GAAG,IAAI,QAAQ,CAAC,wBAAwB,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE,GAAG,EAAE,MAAM,CAAC,CAAA;QAElG,IAAI,QAAQ,CAAA;QACZ,IAAI,QAAQ,GAAG,IAAI,CAAA;QAEnB,IAAI,KAAK,CAAC,KAAK;YAAE,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,kBAAkB,EAAE,IAAI,CAAC,sBAAsB,CAAC,CAAA;QAEvG,IAAI;YACF,QAAQ,GAAG,MAAM,kBAAkB,CAAC,WAAW,CAAC,IAAI,CAAC,CACnD,QAAQ,EACR,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EACZ,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,EAC/B,IAAI,CAAC,kBAAkB,EACvB,IAAI,CAAC,sBAAsB,CAC5B,CAAA;YACD,QAAQ,GAAG,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAA;SACpC;QAAC,OAAO,CAAC,EAAE;YACV,IAAI,cAAc,EAAE;gBAClB,OAAO,CAAC,GAAG,CAAC,2CAA2C,CAAC,CAAA;gBACxD,QAAQ,GAAG,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA,CAAC,OAAO;gBAC3C,QAAQ,GAAG,IAAI,CAAA;aAChB;iBAAM;gBACL,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAA;aAC3B;SACF;QAED,MAAM,WAAW,GAAgB,MAAM,kBAAkB,CAAC,SAAS,CACjE,QAAQ,EACR,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EACZ,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,EAC/B,IAAI,CAAC,kBAAkB,EACvB,IAAI,CAAC,sBAAsB,EAC3B,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,CAC9B,CAAA;QAED,OAAO,EAAE,QAAQ,EAAE,WAAW,EAAE,CAAA;IAClC,CAAC;CACF\"}","dts":{"name":"/Users/safahi/Documents/GitHub/core-sdk/limitorder.d.ts","writeByteOrderMark":false,"text":"import { CurrencyAmount, Price, Token } from './entities';\r\nimport { Message } from './entities';\r\nimport { BigNumber } from '@ethersproject/bignumber';\r\nimport { ChainId } from './enums';\r\nimport { NonceManager } from '@ethersproject/experimental';\r\nimport { Signer } from '@ethersproject/abstract-signer';\r\nimport { Transaction } from '@ethersproject/transactions';\r\nimport { Web3Provider } from '@ethersproject/providers';\r\nexport interface ILimitOrderData {\r\n    maker: string;\r\n    tokenIn: string;\r\n    tokenOut: string;\r\n    tokenInDecimals: number;\r\n    tokenOutDecimals: number;\r\n    tokenInSymbol: string;\r\n    tokenOutSymbol: string;\r\n    amountIn: string;\r\n    amountOut: string;\r\n    recipient: string;\r\n    startTime: string | number;\r\n    endTime: string | number;\r\n    stopPrice?: string;\r\n    oracleAddress?: string;\r\n    oracleData?: string;\r\n    v: number;\r\n    r: string;\r\n    s: string;\r\n    chainId: ChainId;\r\n    orderTypeHash?: string;\r\n}\r\nexport declare class LimitOrder {\r\n    readonly maker: string;\r\n    readonly amountIn: CurrencyAmount<Token>;\r\n    readonly amountOut: CurrencyAmount<Token>;\r\n    readonly recipient: string;\r\n    readonly startTime: string;\r\n    readonly endTime: string;\r\n    readonly stopPrice: string;\r\n    readonly oracleAddress: string;\r\n    readonly oracleData: string;\r\n    v: number;\r\n    r: string;\r\n    s: string;\r\n    static getLimitOrder(data: ILimitOrderData): LimitOrder;\r\n    constructor(maker: string, amountIn: CurrencyAmount<Token>, amountOut: CurrencyAmount<Token>, recipient: string, startTime: string | number, endTime: string | number, stopPrice?: string, oracleAddress?: string, oracleData?: string, v?: number, r?: string, s?: string);\r\n    get amountInRaw(): string;\r\n    get amountOutRaw(): string;\r\n    get tokenInAddress(): string;\r\n    get tokenOutAddress(): string;\r\n    get tokenInDecimals(): number;\r\n    get tokenOutDecimals(): number;\r\n    get tokenInSymbol(): string;\r\n    get tokenOutSymbol(): string;\r\n    get chainId(): ChainId;\r\n    usePrice(price: Price<Token, Token>): LimitOrder;\r\n    signdOrderWithPrivatekey(chainId: ChainId, privateKey: string): {\r\n        v: number;\r\n        r: string;\r\n        s: string;\r\n    };\r\n    signOrderWithProvider(chainId: ChainId, provider: Web3Provider): Promise<{\r\n        v: number;\r\n        r: string;\r\n        s: string;\r\n    }>;\r\n    getTypedData(): {\r\n        types: {\r\n            EIP712Domain: {\r\n                name: string;\r\n                type: string;\r\n            }[];\r\n            LimitOrder: {\r\n                name: string;\r\n                type: string;\r\n            }[];\r\n        };\r\n        primaryType: string;\r\n        domain: import(\"./entities\").Domain;\r\n        message: Message;\r\n    };\r\n    getTypeHash(): string;\r\n    send(): Promise<any>;\r\n}\r\nexport declare class FillLimitOrder {\r\n    readonly order: LimitOrder;\r\n    readonly path: string[];\r\n    readonly amountExternal: BigNumber;\r\n    readonly amountToFill: BigNumber;\r\n    readonly limitOrderReceiver: string;\r\n    readonly to: string;\r\n    readonly tokenIn: string;\r\n    readonly tokenOut: string;\r\n    readonly limitOrderReceiverData: string;\r\n    constructor(order: LimitOrder, path: string[], amountExternal: BigNumber, amountToFill: BigNumber, limitOrderReceiver: string, to: string, keepTokenIn?: boolean);\r\n    fillOrderOpen(signer: Signer, extra: {\r\n        forceExecution?: boolean;\r\n        gasPrice?: BigNumber;\r\n        nonce?: number;\r\n        debug?: boolean;\r\n        open?: boolean;\r\n    }): Promise<{\r\n        executed: boolean;\r\n        transaction?: Transaction | undefined;\r\n    }>;\r\n    fillOrder(signer: Signer | NonceManager, extra: {\r\n        debug?: boolean;\r\n        forceExecution?: boolean;\r\n        gasPrice?: BigNumber;\r\n        open?: boolean;\r\n        nonce?: number;\r\n    }): Promise<{\r\n        executed: boolean;\r\n        transaction?: Transaction;\r\n    }>;\r\n}\r\n"}}

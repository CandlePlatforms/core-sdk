{"code":"import { BigNumber } from '@ethersproject/bignumber';\r\nimport { PoolType, CL_MIN_TICK, CL_MAX_TICK } from '../types/MultiRouterTypes';\r\nconst A_PRECISION = 100;\r\nconst DCacheBN = new Map();\r\nexport function HybridComputeLiquidity(pool) {\r\n    const res = DCacheBN.get(pool);\r\n    if (res !== undefined)\r\n        return res;\r\n    const r0 = pool.reserve0;\r\n    const r1 = pool.reserve1;\r\n    if (r0.isZero() && r1.isZero()) {\r\n        DCacheBN.set(pool, BigNumber.from(0));\r\n        return BigNumber.from(0);\r\n    }\r\n    const s = r0.add(r1);\r\n    const nA = BigNumber.from(pool.A * 2);\r\n    let prevD;\r\n    let D = s;\r\n    for (let i = 0; i < 256; i++) {\r\n        const dP = D.mul(D)\r\n            .div(r0)\r\n            .mul(D)\r\n            .div(r1)\r\n            .div(4);\r\n        prevD = D;\r\n        D = nA\r\n            .mul(s)\r\n            .div(A_PRECISION)\r\n            .add(dP.mul(2))\r\n            .mul(D)\r\n            .div(nA\r\n            .div(A_PRECISION)\r\n            .sub(1)\r\n            .mul(D)\r\n            .add(dP.mul(3)));\r\n        if (D.sub(prevD)\r\n            .abs()\r\n            .lte(1)) {\r\n            break;\r\n        }\r\n    }\r\n    DCacheBN.set(pool, D);\r\n    return D;\r\n}\r\nexport function HybridgetY(pool, x) {\r\n    const D = HybridComputeLiquidity(pool);\r\n    const nA = pool.A * 2;\r\n    let c = D.mul(D)\r\n        .div(x.mul(2))\r\n        .mul(D)\r\n        .div((nA * 2) / A_PRECISION);\r\n    let b = D.mul(A_PRECISION)\r\n        .div(nA)\r\n        .add(x);\r\n    let yPrev;\r\n    let y = D;\r\n    for (let i = 0; i < 256; i++) {\r\n        yPrev = y;\r\n        y = y\r\n            .mul(y)\r\n            .add(c)\r\n            .div(y\r\n            .mul(2)\r\n            .add(b)\r\n            .sub(D));\r\n        if (y\r\n            .sub(yPrev)\r\n            .abs()\r\n            .lte(1)) {\r\n            break;\r\n        }\r\n    }\r\n    return y;\r\n}\r\nexport function calcOutByIn(pool, amountIn, direction = true) {\r\n    const xBN = direction ? pool.reserve0 : pool.reserve1;\r\n    const yBN = direction ? pool.reserve1 : pool.reserve0;\r\n    switch (pool.type) {\r\n        case PoolType.ConstantProduct: {\r\n            const x = parseInt(xBN.toString());\r\n            const y = parseInt(yBN.toString());\r\n            return (y * amountIn) / (x / (1 - pool.fee) + amountIn);\r\n        }\r\n        case PoolType.Weighted: {\r\n            const x = parseInt(xBN.toString());\r\n            const y = parseInt(yBN.toString());\r\n            const wPool = pool;\r\n            const weightRatio = direction ? wPool.weight0 / wPool.weight1 : wPool.weight1 / wPool.weight0;\r\n            const actualIn = amountIn * (1 - pool.fee);\r\n            const out = y * (1 - Math.pow(x / (x + actualIn), weightRatio));\r\n            return out;\r\n        }\r\n        case PoolType.Hybrid: {\r\n            // const xNew = x + amountIn*(1-pool.fee);\r\n            // const yNew = HybridgetY(pool, xNew);\r\n            // const dy = y - yNew;\r\n            const xNewBN = xBN.add(getBigNumber(undefined, amountIn * (1 - pool.fee)));\r\n            const yNewBN = HybridgetY(pool, xNewBN);\r\n            const dy = parseInt(yBN.sub(yNewBN).toString());\r\n            return dy;\r\n        }\r\n        case PoolType.ConcentratedLiquidity: {\r\n            return ConcentratedLiquidityOutByIn(pool, amountIn, direction);\r\n        }\r\n    }\r\n}\r\nexport class OutOfLiquidity extends Error {\r\n}\r\nfunction ConcentratedLiquidityOutByIn(pool, inAmount, direction) {\r\n    if (pool.ticks.length === 0)\r\n        return 0;\r\n    if (pool.ticks[0].index > CL_MIN_TICK)\r\n        pool.ticks.unshift({ index: CL_MIN_TICK, DLiquidity: 0 });\r\n    if (pool.ticks[pool.ticks.length - 1].index < CL_MAX_TICK)\r\n        pool.ticks.push({ index: CL_MAX_TICK, DLiquidity: 0 });\r\n    let nextTickToCross = direction ? pool.nearestTick : pool.nearestTick + 1;\r\n    let currentPrice = pool.sqrtPrice;\r\n    let currentLiquidity = pool.liquidity;\r\n    let outAmount = 0;\r\n    let input = inAmount;\r\n    while (input > 0) {\r\n        if (nextTickToCross < 0 || nextTickToCross >= pool.ticks.length)\r\n            throw new OutOfLiquidity();\r\n        const nextTickPrice = Math.sqrt(Math.pow(1.0001, pool.ticks[nextTickToCross].index));\r\n        // console.log('L, P, tick, nextP', currentLiquidity,\r\n        //     currentPrice, pool.ticks[nextTickToCross].index, nextTickPrice);\r\n        let output = 0;\r\n        if (direction) {\r\n            const maxDx = (currentLiquidity * (currentPrice - nextTickPrice)) / currentPrice / nextTickPrice;\r\n            //console.log('input, maxDx', input, maxDx);\r\n            if (input <= maxDx) {\r\n                output = (currentLiquidity * currentPrice * input) / (input + currentLiquidity / currentPrice);\r\n                input = 0;\r\n            }\r\n            else {\r\n                output = currentLiquidity * (currentPrice - nextTickPrice);\r\n                currentPrice = nextTickPrice;\r\n                input -= maxDx;\r\n                if (pool.ticks[nextTickToCross].index % 2 === 0) {\r\n                    currentLiquidity -= pool.ticks[nextTickToCross].DLiquidity;\r\n                }\r\n                else {\r\n                    currentLiquidity += pool.ticks[nextTickToCross].DLiquidity;\r\n                }\r\n                nextTickToCross--;\r\n            }\r\n        }\r\n        else {\r\n            const maxDy = currentLiquidity * (nextTickPrice - currentPrice);\r\n            //console.log('input, maxDy', input, maxDy);\r\n            if (input <= maxDy) {\r\n                output = input / currentPrice / (currentPrice + input / currentLiquidity);\r\n                input = 0;\r\n            }\r\n            else {\r\n                output = (currentLiquidity * (nextTickPrice - currentPrice)) / currentPrice / nextTickPrice;\r\n                currentPrice = nextTickPrice;\r\n                input -= maxDy;\r\n                if (pool.ticks[nextTickToCross].index % 2 === 0) {\r\n                    currentLiquidity += pool.ticks[nextTickToCross].DLiquidity;\r\n                }\r\n                else {\r\n                    currentLiquidity -= pool.ticks[nextTickToCross].DLiquidity;\r\n                }\r\n                nextTickToCross++;\r\n            }\r\n        }\r\n        outAmount += output * (1 - pool.fee);\r\n        //console.log('out', outAmount);\r\n    }\r\n    return outAmount;\r\n}\r\nexport function calcInByOut(pool, amountOut, direction) {\r\n    let input = 0;\r\n    const xBN = direction ? pool.reserve0 : pool.reserve1;\r\n    const yBN = direction ? pool.reserve1 : pool.reserve0;\r\n    switch (pool.type) {\r\n        case PoolType.ConstantProduct: {\r\n            const x = parseInt(xBN.toString());\r\n            const y = parseInt(yBN.toString());\r\n            input = (x * amountOut) / (1 - pool.fee) / (y - amountOut);\r\n            break;\r\n        }\r\n        case PoolType.Weighted: {\r\n            const x = parseInt(xBN.toString());\r\n            const y = parseInt(yBN.toString());\r\n            const wPool = pool;\r\n            const weightRatio = direction ? wPool.weight0 / wPool.weight1 : wPool.weight1 / wPool.weight0;\r\n            input = x * (1 - pool.fee) * (Math.pow(1 - amountOut / y, -weightRatio) - 1);\r\n            break;\r\n        }\r\n        case PoolType.Hybrid: {\r\n            let yNewBN = yBN.sub(getBigNumber(undefined, amountOut));\r\n            if (yNewBN.lt(1))\r\n                // lack of precision\r\n                yNewBN = BigNumber.from(1);\r\n            const xNewBN = HybridgetY(pool, yNewBN);\r\n            input = Math.round(parseInt(xNewBN.sub(xBN).toString()) / (1 - pool.fee));\r\n            // const yNew = y - amountOut;\r\n            // const xNew = HybridgetY(pool, yNew);\r\n            // input = (xNew - x)/(1-pool.fee);\r\n            break;\r\n        }\r\n        default:\r\n            console.error('Unknown pool type');\r\n    }\r\n    // ASSERT(() => {\r\n    //   const amount2 = calcOutByIn(pool, input, direction);\r\n    //   const res = closeValues(amountOut, amount2, 1e-6);\r\n    //   if (!res) console.log(\"Error 138:\", amountOut, amount2, Math.abs(amountOut/amount2 - 1));\r\n    //   return res;\r\n    // });\r\n    if (input < 1)\r\n        input = 1;\r\n    return input;\r\n}\r\nexport function calcPrice(pool, amountIn, takeFeeIntoAccount = true) {\r\n    const r0 = parseInt(pool.reserve0.toString());\r\n    const r1 = parseInt(pool.reserve1.toString());\r\n    const oneMinusFee = takeFeeIntoAccount ? 1 - pool.fee : 1;\r\n    switch (pool.type) {\r\n        case PoolType.ConstantProduct: {\r\n            const x = r0 / oneMinusFee;\r\n            return (r1 * x) / (x + amountIn) / (x + amountIn);\r\n        }\r\n        case PoolType.Weighted: {\r\n            const wPool = pool;\r\n            const weightRatio = wPool.weight0 / wPool.weight1;\r\n            const x = r0 + amountIn * oneMinusFee;\r\n            return (r1 * weightRatio * oneMinusFee * Math.pow(r0 / x, weightRatio)) / x;\r\n        }\r\n        case PoolType.Hybrid: {\r\n            const hPool = pool;\r\n            const D = parseInt(HybridComputeLiquidity(hPool).toString());\r\n            const A = hPool.A / A_PRECISION;\r\n            const x = r0 + amountIn;\r\n            const b = 4 * A * x + D - 4 * A * D;\r\n            const ac4 = (D * D * D) / x;\r\n            const Ds = Math.sqrt(b * b + 4 * A * ac4);\r\n            const res = (0.5 - (2 * b - ac4 / x) / Ds / 4) * oneMinusFee;\r\n            return res;\r\n        }\r\n    }\r\n    return 0;\r\n}\r\nfunction calcInputByPriceConstantMean(pool, price) {\r\n    const r0 = parseInt(pool.reserve0.toString());\r\n    const r1 = parseInt(pool.reserve1.toString());\r\n    const weightRatio = pool.weight0 / pool.weight1;\r\n    const t = r1 * price * weightRatio * (1 - pool.fee) * Math.pow(r0, weightRatio);\r\n    return (Math.pow(t, 1 / (weightRatio + 1)) - r0) / (1 - pool.fee);\r\n}\r\nexport function calcInputByPrice(pool, priceEffective, hint = 1) {\r\n    switch (pool.type) {\r\n        case PoolType.ConstantProduct: {\r\n            const r0 = parseInt(pool.reserve0.toString());\r\n            const r1 = parseInt(pool.reserve1.toString());\r\n            const x = r0 / (1 - pool.fee);\r\n            const res = Math.sqrt(r1 * x * priceEffective) - x;\r\n            return res;\r\n        }\r\n        case PoolType.Weighted: {\r\n            const res = calcInputByPriceConstantMean(pool, priceEffective);\r\n            return res;\r\n        }\r\n        case PoolType.Hybrid: {\r\n            return revertPositive((x) => 1 / calcPrice(pool, x), priceEffective, hint);\r\n        }\r\n    }\r\n    return 0;\r\n}\r\n//================================= Utils ====================================\r\nexport function ASSERT(f, t) {\r\n    if (!f() && t)\r\n        console.error(t);\r\n}\r\nexport function closeValues(a, b, accuracy) {\r\n    if (accuracy === 0)\r\n        return a === b;\r\n    if (a < 1 / accuracy)\r\n        return Math.abs(a - b) <= 10;\r\n    return Math.abs(a / b - 1) < accuracy;\r\n}\r\nexport function calcSquareEquation(a, b, c) {\r\n    const D = b * b - 4 * a * c;\r\n    console.assert(D >= 0, `Discriminant is negative! ${a} ${b} ${c}`);\r\n    const sqrtD = Math.sqrt(D);\r\n    return [(-b - sqrtD) / 2 / a, (-b + sqrtD) / 2 / a];\r\n}\r\n// returns such x > 0 that f(x) = out or 0 if there is no such x or f defined not everywhere\r\n// hint - approximation of x to spead up the algorithm\r\n// f assumed to be continues monotone growth function defined everywhere\r\nexport function revertPositive(f, out, hint = 1) {\r\n    try {\r\n        if (out <= f(0))\r\n            return 0;\r\n        let min, max;\r\n        if (f(hint) > out) {\r\n            min = hint / 2;\r\n            while (f(min) > out)\r\n                min /= 2;\r\n            max = min * 2;\r\n        }\r\n        else {\r\n            max = hint * 2;\r\n            while (f(max) < out)\r\n                max *= 2;\r\n            min = max / 2;\r\n        }\r\n        while (max / min - 1 > 1e-4) {\r\n            const x0 = (min + max) / 2;\r\n            const y0 = f(x0);\r\n            if (out === y0)\r\n                return x0;\r\n            if (out < y0)\r\n                max = x0;\r\n            else\r\n                min = x0;\r\n        }\r\n        return (min + max) / 2;\r\n    }\r\n    catch (e) {\r\n        return 0;\r\n    }\r\n}\r\nexport function getBigNumber(valueBN, value) {\r\n    if (valueBN !== undefined)\r\n        return valueBN;\r\n    if (value < Number.MAX_SAFE_INTEGER)\r\n        return BigNumber.from(Math.round(value));\r\n    const exp = Math.floor(Math.log(value) / Math.LN2);\r\n    console.assert(exp >= 51, 'Internal Error 314');\r\n    const shift = exp - 51;\r\n    const mant = Math.round(value / Math.pow(2, shift));\r\n    const res = BigNumber.from(mant).mul(BigNumber.from(2).pow(shift));\r\n    return res;\r\n}\r\n//# sourceMappingURL=MultiRouterMath.js.map","references":["/Users/safahi/Documents/GitHub/core-sdk/node_modules/@ethersproject/bignumber/lib/index.d.ts","/Users/safahi/Documents/GitHub/core-sdk/src/types/MultiRouterTypes.ts"],"map":"{\"version\":3,\"file\":\"MultiRouterMath.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/utils/MultiRouterMath.ts\"],\"names\":[],\"mappings\":\"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\"}"}
